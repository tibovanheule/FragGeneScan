.TH "src/util_lib.h" 3 "Ma 8 Jun 2020" "Version 0.1" "FragScanTibo" \" -*- nroff -*-
.ad l
.nh
.SH NAME
src/util_lib.h
.SH SYNOPSIS
.br
.PP
\fC#include <stdlib\&.h>\fP
.br
\fC#include <stdio\&.h>\fP
.br
\fC#include <math\&.h>\fP
.br
\fC#include <stdarg\&.h>\fP
.br

.SS "Enumeraties"

.in +1c
.ti -1c
.RI "enum \fBtrenum\fP { \fBMM\fP = 0, \fBMI\fP = 1, \fBMD\fP = 2, \fBII\fP = 3, \fBIM\fP = 4, \fBDD\fP = 5, \fBDM\fP = 6, \fBGE\fP = 7, \fBGG\fP = 8, \fBER\fP = 9, \fBRS\fP = 10, \fBRR\fP = 11, \fBES\fP = 12, \fBES1\fP = 13 }"
.br
.in -1c
.SS "Functies"

.in +1c
.ti -1c
.RI "double ** \fBdmatrix\fP (int num_row, int num_col)"
.br
.ti -1c
.RI "double * \fBdvector\fP (int nh)"
.br
.ti -1c
.RI "int ** \fBimatrix\fP (int num_row, int num_col)"
.br
.ti -1c
.RI "int * \fBivector\fP (int nh)"
.br
.ti -1c
.RI "void \fBfree_dvector\fP (double *v)"
.br
.ti -1c
.RI "void \fBfree_dmatrix\fP (double **m, int num_row)"
.br
.ti -1c
.RI "void \fBfree_ivector\fP (int *v)"
.br
.ti -1c
.RI "void \fBfree_imatrix\fP (int **m, int num_row)"
.br
.ti -1c
.RI "int \fBtr2int\fP (char *nt)"
.br
.ti -1c
.RI "int \fBnt2int\fP (char nt)"
.br
.ti -1c
.RI "int \fBnt2int_rc\fP (char nt)"
.br
.ti -1c
.RI "int \fBtrinucleotide\fP (char a, char b, char c)"
.br
.ti -1c
.RI "void \fBget_protein\fP (char *dna, char *protein, int strand, int whole_genome)"
.br
.ti -1c
.RI "void \fBprint_usage\fP ()"
.br
.ti -1c
.RI "void \fBprint_allocation_error\fP (const char *format,\&.\&.\&.)"
.br
.in -1c
.SH "Documentatie van enumeratie types"
.PP 
.SS "enum \fBtrenum\fP"

.PP
\fBEnumeratie waarden\fP
.in +1c
.TP
\fB\fIMM \fP\fP
.TP
\fB\fIMI \fP\fP
.TP
\fB\fIMD \fP\fP
.TP
\fB\fIII \fP\fP
.TP
\fB\fIIM \fP\fP
.TP
\fB\fIDD \fP\fP
.TP
\fB\fIDM \fP\fP
.TP
\fB\fIGE \fP\fP
.TP
\fB\fIGG \fP\fP
.TP
\fB\fIER \fP\fP
.TP
\fB\fIRS \fP\fP
.TP
\fB\fIRR \fP\fP
.TP
\fB\fIES \fP\fP
.TP
\fB\fIES1 \fP\fP
.SH "Documentatie van functies"
.PP 
.SS "double** dmatrix (int num_row, int num_col)"
Makes an matrix with datatype double\&. Elements are double pointers en matrix is a double double pointer (**pointer)\&. Exits when allocation fails\&. 
.SS "double* dvector (int nh)"
Makes an vector (array) with datatype double\&. Elements are doubles en vector is a double pointer\&. Exits when allocation fails\&. 
.SS "void free_dmatrix (double ** m, int num_row)"
Frees the memory allocation of an matrix with datatype double\&. 
.SS "void free_dvector (double * v)"
Frees the memory allocation of an vector with datatype double\&. 
.SS "void free_imatrix (int ** m, int num_row)"
Frees the memory allocation of an matrix with datatype int\&. 
.SS "void free_ivector (int * v)"
Frees the memory allocation of an vector with datatype int\&. 
.SS "void get_protein (char * dna, char * protein, int strand, int whole_genome)"

.SS "int** imatrix (int num_row, int num_col)"
Makes an matrix with datatype int\&. Elements are int pointers en matrix is a double int pointer\&. Exits when allocation fails\&. 
.SS "int* ivector (int nh)"
Makes an vector array) with datatype int\&. Elements are ints en vector is a int pointer\&. Exits when allocation fails\&. 
.SS "int nt2int (char nt)"

.SS "int nt2int_rc (char nt)"

.SS "void print_allocation_error (const char * format,  \&.\&.\&.)"

.SS "void print_usage ()"

.SS "int tr2int (char * tr)"
Converts a given transition to int\&. Use for example as indexing 
.SS "int trinucleotide (char a, char b, char c)"

.SH "Auteur"
.PP 
Automatisch gegenereerd door Doxygen voor FragScanTibo uit de programmatekst\&.
